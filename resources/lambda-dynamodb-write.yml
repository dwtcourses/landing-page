Resources:
  LambdaDynamoDbWrite:
      Type: AWS::Lambda::Function
      Properties:
        Code:
          ZipFile: |
            'use strict';

            var AWS = require('aws-sdk');
            var dynamodb = new AWS.DynamoDB.DocumentClient({region: 'eu-central-1'});

            exports.handler = function (event, context, callback) {
                var responseCode = 200;
                var response = {
                    statusCode: responseCode,
                    headers: {
                        'Content-Type': 'application/json',
                        "Access-Control-Allow-Origin" : "*", // Required for CORS support to work
                        "Access-Control-Allow-Credentials" : true // Required for cookies, authorization headers with HTTPS
                        
                    },
                    
                    "body": "{\"result\": \"Success.\"}",
                    
                };
                
                var data = JSON.parse(event.body);
                var params = {
                    Item: {
                        email: data.email,
                        verify_id: context.awsRequestId,
                        verified: false
                    },
                    
                    TableName: 'LandingPage'
                };
                
                dynamodb.put(params, function(err, data){
                    if(err){
                        callback(err, null);
                    }else{
                        callback(null, response);
                
                    }
                });
            };
        Description: AWS Lambda function
        FunctionName: 'lambda-dynamoDb-write'
        Handler: index.handler
        MemorySize: 256
        Role: !GetAtt LambdaDynamoDbWriteIamRole.Arn
        Runtime: nodejs12.x
        Timeout: 60

  LambdaDynamoDbWriteIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
              
      Path: '/'
      Policies:
        - PolicyName: landingPageLambdaDynamoDbWriteRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 
                  - 's3:GetObject'
                  - 'dynamodb:PutItem'
                  - 'apigateway:POST'
                Resource: '*'